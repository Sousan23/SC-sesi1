{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM/wFbvGvi+G6nETFQFbIH/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sousan23/SC-sesi1/blob/main/Untitled2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 536
        },
        "id": "ImzWtIIj4sTH",
        "outputId": "84c41de0-a05e-4cf3-cd75-4ea652d5775d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Soal 1 - Gauss Seidel: [-8.85379963e+93 -2.65613989e+94  7.96841967e+94]\n",
            "Soal 1 - Numpy: [0.65 4.15 3.75]\n",
            "Soal 2 - Gauss Seidel: [ 3.00000022 -2.50000002  6.99999999]\n",
            "Soal 2 - Numpy: [ 3.  -2.5  7. ]\n",
            "Regresi linier: y = 2.00x + 0.00\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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vr26d++u//3vf4U+xul0qnPnzqpdu7bWr1+vF154QePGjdObb77pWWfVqlXq16+f7r77bv3vf/9Tz5491bNnT23duvW8ex08eLDGjRtX6P2jRo3S559/rk8++UTLly/Xvn371KtXryKfc9KkSZoyZYqmTZumNWvWqHz58urSpYslDN9xxx3atm2bFi1apC+++EIrVqzQX/7yl/N+HwB848QJ91l7//GP3Nq8edJnn9nXk094+0JRdvP6hSZtMGjQINOjRw9LrVevXuaKK67wLLtcLvPcc8+ZOnXqmLJly5rLLrvMfPLJJ5bHfPbZZ6Z+/fomKirKtGvXziQnJ1suQjljxgwTGxtrPvvsM3PJJZeYsLAwk5KSYk6ePGkefvhhk5iYaKKjo83VV19tvv76a8/z7t6923Tr1s1UqlTJREdHmyZNmph58+YZY4z5+uuv813osigZGRmmYsWK+XqfM2eOiY6ONk6ns3gb7RyaNGlinn766ULvf/31103lypVNVlaWp/b444+bRo0aeZb79u1runbtanlcy5YtzdChQ40xxvzwww+mXLlyZtasWZ77//Wvf5myZcuabdu2Ffi6gwYN8lz8M6+jR4+aiIgIy7b54YcfjCSzevXqAh+Tk5Nj4uPjzQsvvGB5nqioKPPhhx8aY4z5/vvvjSSzdu1azzoLFiwwDofD7N27t8DnDdSfJSCYrFxpvUCkZMzRo3Z3df5KcqFJRmbyMEY6ftz3twu53OfWrVu1atUqRUZGemoTJkzQu+++q2nTpmnbtm0aNWqU7rzzTi1fvlySlJKSoj59+qhnz57atGmThg4dqieeeCLfc2dmZmrixIn65z//qW3btqlatWq6//77tXr1an300UfavHmzbr31Vt14442eqYr77rtPWVlZWrFihbZs2aKJEyeqQoUKhfbvcDiUnJxc4H3ly5fX7bffrhkzZljqM2bMUJ8+fVSxYkVJUtOmTVWhQoVCbzfddFOhr5+Tk6Njx44projx19WrV+v666+3bOMuXbpo+/btOnLkiGedjh07Wh7XpUsXrV69WpLUuHFjvfjiixo+fLhSU1P166+/atiwYZo4caKaNGlS6GsXZv369crOzra8ZuPGjVWrVi3Pa+aVkpKi/fv3Wx4TGxurli1beh6zevVqVapUSVdddZVnnY4dO6pMmTJas2ZNifsE4H1Dh7pPfHfGbbe5v1dsnNH3KY5myiMzUyrie9drMjKk8uWLv/4XX3yhChUq6PTp08rKylKZMmX02muvSZKysrL03HPPafHixWrVqpUk6eKLL9a3336r6dOnq23btpo+fboaNWqkF154QZLUqFEjbd26VePHj7e8TnZ2tl5//XU1b95ckpSamqoZM2YoNTVViYmJkqRHHnlEX375pWbMmKHnnntOqamp6t27t5r9cXrJiy++uMj30qhRoyL3obnnnns8+9okJCTo4MGDmj9/vhYvXuxZZ/78+crOzi70OcqVK1fofS+++KIyMjLUt2/fQtfZv3+/6tata6lVr17dc1/lypW1f/9+T+3sdfbv3+9ZHj58uObPn68777xTkZGRatGihR544IFCX7co+/fvV2RkpCpVqlTka+Z9zNm9F/SY/fv3q1q1apb7w8PDFRcXV+jzArDH8eP5v7MWLZLy/F0V9AgzAap9+/Z64403dPz4cb3yyisKDw9X7969JUk7d+5UZmamOnXqZHnMqVOndMUfJxrYvn27WrRoYbn/6rP3FvtDZGSkLrvsMs/yli1b5HK51LBhQ8t6WVlZqlKliiTpwQcf1L333quvvvpKHTt2VO/evS3PkdePP/5Y5Hu9+uqr1bRpU82cOVOjR4/W+++/r9q1a+v666/3rFO7du0in6MwH3zwgZ5++ml99tln+b7AveWdd95Rw4YNVaZMGW3bts2y/9CsWbM0dOhQz3JWVpYcDodefPFFT23BggVq06aNT3oF4L++/lq64QZrzemU/hiwDimEmTyio92jJHa8bkmUL19e9evXl+T+cmzevLnefvtty1En8+bNU40aNSyPi4qKKtHrlCtXzvJlm5GRobCwMK1fv15hYWGWdc9MJd1zzz3q0qWL5s2bp6+++koTJkzQSy+9dN4jEGeec+rUqRo9erRmzJihIUOGWPpq2rSpfvnll0If36ZNGy1YsMBS++ijj3TPPffok08+yTc9lFd8fHy+o4TOLMfHxxe5zpn7z9i0aZOOHz+uMmXKeEabzrj55pvVsmVLz/Ljjz+uGjVq6MEHH/TUzvw/jY+P16lTp3T06FHL6ExBr3n2+zizztmve+DAAV1++eWedQ4ePGh53OnTp/X7778X+rwAfGvgQOm993KXBw2SCpmtDwmEmTwcjpJN9/iDMmXK6K9//aseeugh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8juLMFNMeb+g27ZtawYNGmRZ5+OPPzYNGzY0kZGRpmnTpmbevHm+bdJPnGtbjRw50tSqVctERkaa6tWrmz//+c9mw4YNvm/UBrfddptJSEgwkZGRpkaNGua2224zO3fu9NzP5ypXSbdVKH+ujDHm888/N5deeqmJiooyjRs3Nm+++abl/kGDBpm2bdtaal9//bW5/PLLTWRkpLn44ovNjBkzfNewjUq6rSZOnGjq1atnypYta+Li4ky7du3M0qVLfdy1fRYuXGgkme3bt+e7z19+ZzmMMca7Yz8AAADewz4zAAAgoBFmAABAQCPMAACAgEaYAQAAAY0wAwAAAhphBgAABDTCDAAACGiEGQAAENAIMwAAIKARZgAEFJfLpdatW6tXr16Wenp6upKSkvTEE0/Y1BkAu3A5AwAB56efftLll1+ut956S3fccYckaeDAgdq0aZPWrl2ryMhImzsE4EuEGQABacqUKRo3bpy2bdum7777TrfeeqvWrl2r5s2b290aAB8jzAAISMYY3XDDDQoLC9OWLVv0wAMP6G9/+5vdbQGwAWEGQMD68ccfdckll6hZs2basGGDwsPD7W4JgA3YARhAwHrnnXcUHR2tlJQU/frrr3a3A8AmjMwACEirVq1S27Zt9dVXX+nZZ5+VJC1evFgOh8PmzgD4GiMzAAJOZmamBg8erHvvvVft27fX22+/re+++07Tpk2zuzUANmBkBkDAGTFihObPn69NmzYpOjpakjR9+nQ98sgj2rJli+rUqWNvgwB8ijADIKAsX75cHTp00LJly3TddddZ7uvSpYtOnz7NdBMQYggzAAAgoLHPDAAACGiEGQAAENAIMwAAIKARZgAAQEAjzAAAgIBGmAEAAAGNMAMAAAIaYQYAAAQ0wgwAAAhohBkAABDQCDMAACCg/T/vU+vnti+LiQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def gauss_seidel(A, b, x0, tol=1e-3, max_iter=100):\n",
        "    n = len(b)\n",
        "    x = np.array(x0, dtype=float)\n",
        "    for _ in range(max_iter):\n",
        "        x_old = x.copy()\n",
        "        for i in range(n):\n",
        "            sigma = sum(A[i][j] * x[j] for j in range(n) if j != i)\n",
        "            x[i] = (b[i] - sigma) / A[i][i]\n",
        "        if np.linalg.norm(x - x_old, ord=np.inf) < tol:\n",
        "            break\n",
        "    return x\n",
        "\n",
        "# Soal 1: Gauss-Seidel vs Numpy\n",
        "A1 = np.array([[2, 3, -1], [1, -1, 2], [3, 2, 1]])\n",
        "b1 = np.array([10, 4, 14])\n",
        "x0_1 = [5, 5, 5]\n",
        "\n",
        "x_gs_1 = gauss_seidel(A1, b1, x0_1)\n",
        "x_np_1 = np.linalg.solve(A1, b1)\n",
        "print(\"Soal 1 - Gauss Seidel:\", x_gs_1)\n",
        "print(\"Soal 1 - Numpy:\", x_np_1)\n",
        "\n",
        "# Soal 2: Gauss-Seidel vs Numpy\n",
        "A2 = np.array([[3, -0.1, -0.2], [0.1, 7, -0.3], [0.3, -0.2, 10]])\n",
        "b2 = np.array([7.85, -19.3, 71.4])\n",
        "x0_2 = [1, 2, 3]\n",
        "\n",
        "x_gs_2 = gauss_seidel(A2, b2, x0_2)\n",
        "x_np_2 = np.linalg.solve(A2, b2)\n",
        "print(\"Soal 2 - Gauss Seidel:\", x_gs_2)\n",
        "print(\"Soal 2 - Numpy:\", x_np_2)\n",
        "\n",
        "# Soal 3: Regresi Linier dengan Least Square Method\n",
        "data_x = np.array([5, 4, 6, 7, 5])\n",
        "data_y = np.array([10, 8, 12, 14, 10])\n",
        "\n",
        "n = len(data_x)\n",
        "sum_x = np.sum(data_x)\n",
        "sum_y = np.sum(data_y)\n",
        "sum_xy = np.sum(data_x * data_y)\n",
        "sum_x2 = np.sum(data_x**2)\n",
        "\n",
        "a = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x**2)\n",
        "b = (sum_y - a * sum_x) / n\n",
        "\n",
        "print(f\"Regresi linier: y = {a:.2f}x + {b:.2f}\")\n",
        "\n",
        "# Plot hasil regresi\n",
        "plt.scatter(data_x, data_y, color='red', label='Data')\n",
        "plt.plot(data_x, a * data_x + b, label=f'Regresi: y={a:.2f}x+{b:.2f}', color='blue')\n",
        "plt.xlabel('X')\n",
        "plt.ylabel('Y')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ]
    }
  ]
}
